/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coiso;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author 4276663
 */
public class NewJFrame extends javax.swing.JFrame {

    public static List<Estados> estados = new ArrayList();

    public static enum Estados {
        PLANEJANDO, CODIFICANDO, EXECUTANDO, MUDAR_ROBO, OBS_ROBO, MOD_ALEAT, OBS_ALEAT;
    }

    /**
     * Creates new form NewJFrame
     */
    private void initStates() {
        estados.add(Estados.OBS_ALEAT);
        paintThinks();
    }

    public NewJFrame() {
        initComponents();
        attAll();
        initStates();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        planejar = new javax.swing.JLabel();
        codificar = new javax.swing.JLabel();
        executar = new javax.swing.JLabel();
        mudar_robo = new javax.swing.JLabel();
        obs_robo = new javax.swing.JLabel();
        mudar_aleat = new javax.swing.JLabel();
        obs_aleat = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        jLabel17.setText("5s olhando para interface de programação sem ter cometido outra ação");

        jLabel18.setText("Mandar o robô rodar e ficar observando seus movimentos");

        jLabel19.setText("Deste estado ele não pode ir pro estado de observar o robô");

        jLabel20.setText("Mudar o código fonte.");

        jLabel21.setText("Modificar terreno perto do robô, para arrumar algo, permitir passagem");

        jLabel22.setText("Ou consertar algo.");

        jLabel23.setText("Olhar o mundo perto do robô");

        jLabel24.setText("Não pode vir do estado Executar");

        jLabel25.setText("5s olhando para coisas que não tem haver");

        jLabel26.setText("com o robô");

        planejar.setText("Planejando (Q)");
        planejar.setOpaque(true);

        codificar.setText("Codificar (D)");
        codificar.setOpaque(true);

        executar.setText("Executar (E)");
        executar.setOpaque(true);

        mudar_robo.setText("Mudar Terreno Robô (Y)");
        mudar_robo.setOpaque(true);

        obs_robo.setText("Observar Robô (I)");
        obs_robo.setOpaque(true);

        mudar_aleat.setText("Mudar Terreno Aleatóriamente (H)");
        mudar_aleat.setOpaque(true);

        obs_aleat.setText("Observar Aleatório (K)");
        obs_aleat.setOpaque(true);

        jLabel1.setText("Gerar Resultados (B)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel23))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(executar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(codificar)
                        .addGap(46, 46, 46))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel18))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(101, 101, 101)
                                .addComponent(mudar_robo)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(obs_robo)
                            .addComponent(jLabel20))))
                .addGap(24, 24, 24))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel24)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel19))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(planejar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(mudar_aleat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(obs_aleat)
                .addGap(64, 64, 64))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel26)
                    .addComponent(jLabel25))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(planejar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel17)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codificar)
                    .addComponent(executar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mudar_robo)
                    .addComponent(obs_robo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jLabel24))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mudar_aleat)
                            .addComponent(obs_aleat))
                        .addGap(12, 12, 12)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel26)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
    }//GEN-LAST:event_formKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    private void attAll() {
        planejar.setBackground(Color.WHITE);
        codificar.setBackground(Color.WHITE);
        executar.setBackground(Color.WHITE);
        mudar_robo.setBackground(Color.WHITE);
        mudar_aleat.setBackground(Color.WHITE);
        obs_aleat.setBackground(Color.WHITE);
        obs_robo.setBackground(Color.WHITE);
    }

    boolean BONG = true;

    private void paintThinks() {
        Estados atual = estados.get(estados.size() - 1);
        attAll();
        switch (atual) {
            case PLANEJANDO:
                planejar.setBackground(Color.RED);
                break;
            case CODIFICANDO:
                codificar.setBackground(Color.RED);
                break;
            case EXECUTANDO:
                if (BONG) {
                    executar.setBackground(Color.BLUE);
                    BONG = false;
                } else {
                    executar.setBackground(Color.RED);
                    BONG = true;
                }
                break;
            case MOD_ALEAT:
                mudar_aleat.setBackground(Color.RED);
                break;
            case MUDAR_ROBO:
                mudar_robo.setBackground(Color.RED);
                break;

            case OBS_ALEAT:
                obs_aleat.setBackground(Color.RED);
                break;

            case OBS_ROBO:
                obs_robo.setBackground(Color.RED);
                break;

        }
    }

    @Override
    protected void processKeyEvent(KeyEvent e) {
        char c = e.getKeyChar();

        if (e.getKeyCode() == KeyEvent.VK_UNDEFINED) {
            switch (c) {
                case '\b':
                    if(estados.size() > 1)
                        estados.remove(estados.size() -1);
                    break;
                case 'q':
                    if (estados.get(estados.size() - 1) != Estados.PLANEJANDO) {
                        estados.add(Estados.PLANEJANDO);
                    }
                    break;
                case 'e':
                    estados.add(Estados.EXECUTANDO);
                    break;
                case 'd':
                    if (estados.get(estados.size() - 1) != Estados.CODIFICANDO) {
                        estados.add(Estados.CODIFICANDO);
                    }
                    break;
                case 'y':
                    if (estados.get(estados.size() - 1) != Estados.MUDAR_ROBO) {
                        estados.add(Estados.MUDAR_ROBO);
                    }
                    break;
                case 'i':
                    if (estados.get(estados.size() - 1) != Estados.OBS_ROBO && estados.get(estados.size() - 1) != Estados.EXECUTANDO) {
                        estados.add(Estados.OBS_ROBO);
                    }
                    break;
                case 'h':
                    if (estados.get(estados.size() - 1) != Estados.MOD_ALEAT) {
                        estados.add(Estados.MOD_ALEAT);
                    }
                    break;
                case 'k':
                    if (estados.get(estados.size() - 1) != Estados.OBS_ALEAT) {
                        estados.add(Estados.OBS_ALEAT);
                    }
                    break;
                case 'b':
                    new Resp2(estados.toString()).setVisible(true);
                    break;
            }
            paintThinks();
        }
        
        super.processKeyEvent(e); //To change body of generated methods, choose Tools | Templates.
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel codificar;
    private javax.swing.JLabel executar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel mudar_aleat;
    private javax.swing.JLabel mudar_robo;
    private javax.swing.JLabel obs_aleat;
    private javax.swing.JLabel obs_robo;
    private javax.swing.JLabel planejar;
    // End of variables declaration//GEN-END:variables
}
